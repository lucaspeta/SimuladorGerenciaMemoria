@model SimuladorGerenciaMemoria.Models.Memory

@{
    ViewData["Title"] = "Detalhes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/loading.css" />

<h1><i class="fas fa-memory"></i> Detalhes da memória</h1>

<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.SimulationID)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Simulation.Name)
        </dd>

        <dt class="col-sm-2">
            Memória %
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Size)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Size) bytes
        </dd>

        <dt class="col-sm-2">
            Quantidade de frames
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FramesQTD)
        </dd>

        <dt class="col-sm-2">
            Tamanho dos frames
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FramesSize) bytes
        </dd>

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.InitialState)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.InitialState) %
        </dd>

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.IsGeneratedProcessList)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.IsGeneratedProcessList)
        </dd>

        <dt class="col-sm-2">
            Simulação First-Fit
        </dt>
        <dd class="col-sm-10">
            @if (Model.IsFirstFitCompleted)
            {
                <input id="FirstFitCheck" class="checkbox" type="checkbox" disabled="disabled" checked="checked" />
            }
            else
            {
                <input id="FirstFitCheck" class="checkbox" type="checkbox" disabled="disabled" />
            }
        </dd>

        <dt class="col-sm-2">
            Simulação Next-Fit
        </dt>
        <dd class="col-sm-10">
            @if (Model.IsNextFitCompleted)
            {
                <input id="NextFitCheck" class="checkbox" type="checkbox" disabled="disabled" checked="checked" />
            }
            else
            {
                <input id="NextFitCheck" class="checkbox" type="checkbox" disabled="disabled" />
            }
        </dd>

        <dt class="col-sm-2">
            Simulação Best-Fit
        </dt>
        <dd class="col-sm-10">
            @if (Model.IsBestFitCompleted)
            {
                <input id="BestFitCheck" class="checkbox" type="checkbox" disabled="disabled" checked="checked" />
            }
            else
            {
                <input id="BestFitCheck" class="checkbox" type="checkbox" disabled="disabled" />
            }
        </dd>

        <dt class="col-sm-2">
            Simulação Worst-Fit
        </dt>
        <dd class="col-sm-10">
            @if (Model.IsWorstFitCompleted)
            {
                <input id="WorstFitCheck" class="checkbox" type="checkbox" disabled="disabled" checked="checked" />
            }
            else
            {
                <input id="WorstFitCheck" class="checkbox" type="checkbox" disabled="disabled" />
            }
        </dd>

        <dt class="col-sm-2">
            Data de Criação
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CreateDate)
        </dd>
    </dl>
</div>
<div>
    <a class="btn btn-info" asp-controller="Home" asp-action="Index" asp-route-id="@Model.ID">Visualizar resultados</a> |
    <a class="btn btn-info" asp-action="GerarProcessos" asp-route-id="@Model.ID">Gerar Processos</a> |
    <a data-toggle="modal" data-target="#algModal" data-alg="FirstFit" class="btn btn-success btn-alg btn-FirstFit" disabled="@ViewBag.First">First-fit</a> |
    <a data-toggle="modal" data-target="#algModal" data-alg="NextFit" class="btn btn-success btn-alg btn-NextFit" disabled="@ViewBag.Next">Next-fit</a> |
    <a data-toggle="modal" data-target="#algModal" data-alg="BestFit" class="btn btn-success btn-alg btn-BestFit" disabled="@ViewBag.Best">Best-fit</a> |
    <a data-toggle="modal" data-target="#algModal" data-alg="WorstFit" class="btn btn-success btn-alg btn-WorstFit" disabled="@ViewBag.Worst">Worst-fit</a> |
    <a class="btn btn-info" asp-action="Edit" asp-route-id="@Model.ID">Editar</a> |
    <a class="btn btn-info" asp-action="Index">Voltar para a lista</a>
</div>

<br />

<!-- Loading -->
<div style="margin-top: 250px; margin-left:9px;" class="modal fade" id="loadingModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <p style="margin-left: 150px; font-size: 30pt; font-weight: 800; color: white; display: inline-block; position: relative;">Carregando&nbsp;</p>
        <div style="color: white;" class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>

<div class="panel">
    <div class="panel-heading">
        <h3>Lista de processos inicial na memória</h3>
    </div>
    <div class="panel-body">
        <div class="table">
            <table cellpadding="0" cellspacing="0" border="0" class="table table-striped table-dark" id="tableDados">
                <thead>
                    <tr>
                        <th>
                            Nome
                        </th>
                        <th>
                            Registrador Base
                        </th>
                        <th>
                            Registrador Limite
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null)
                    {
                        foreach (var item in Model.Processes)
                        {
                            if (item.isInitial)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RegB)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RegL)
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal -->
<div style="margin-top: 100px; margin-left:9px;" class="modal fade" id="algModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalAlgTitle"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="modal-body-text"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="iniciar-simulacao btn btn-success">Iniciar</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="~/css/response-modal.css" />

<!-- Modal HTML -->
<div id="response-modal" class="modal fade" style="margin-top: 40px;">
    <div class="modal-dialog modal-confirm">
        <div class="modal-content">
            <div class="modal-header justify-content-center modal-response-header">
                <h4 id="response-title" style="color: white;"></h4>
            </div>
            <div class="modal-body text-center">
                <p id="response-alg"></p>
                <p id="response-message"></p>
                <button class="btn btn-close-response">Fechar</button>
            </div>
        </div>
    </div>
</div>


    <!--Charts-->
    <link rel="stylesheet" href="~/css/Chart.min.css" />
    <script src="~/js/Chart.min.js"></script>

    <br />
    <br />
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6 col-lg-6 col-xs-12">
                <h3 class="box-title">Status da memória (Estado Inicial)</h3>
                <a id="downloadStatus"
                   download="StatusMemoriaInicial.jpg"
                   href=""
                   class="link"
                   title="Baixar Gráfico">
                    Download
                </a>
                <canvas id="memoriaUtilizacao" width="400" height="400"></canvas>
            </div>

            <div class="col-md-6 col-lg-6 col-xs-12">
                <h3 class="box-title">Frames quantidade (Estado Inicial)</h3>
                <p>Agrupado por % da distribuição da memória</p>
                <a id="download"
                   download="EspacoLivresMemoriaInicial.jpg"
                   href=""
                   class="link"
                   title="Baixar Gráfico">
                    Download
                </a>
                <canvas id="espacosLivres" width="400" height="400"></canvas>
            </div>
        </div>
    </div>
    <br />
    <br />

    <script>
    var memoriaUtilizacao = document.getElementById('memoriaUtilizacao').getContext('2d');

    var memoriaUsada = parseFloat('@(ViewBag.memoriaUsada)').toFixed(0);
    var memoriaLivre = parseFloat('@(ViewBag.memoriaLivre)').toFixed(0);
    var memoriaInutil = parseFloat('@(ViewBag.memoriaInutil)').toFixed(0);

    var memoriaChart = new Chart(memoriaUtilizacao, {
        type: 'pie',
        axisY: {
            valueFormatString: "$#,###,#0", //try properties here
        },
        data: {
            labels: ['Útilizada', 'Livre', 'Inútil (Fragmentação Interna)'],
            datasets: [{                
                data: [memoriaUsada, memoriaLivre, memoriaInutil],
                backgroundColor: [
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(255, 99, 132, 0.2)'
                ],
                borderColor: [
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 99, 132, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });

    //Download Chart Image
    document.getElementById("downloadStatus").addEventListener('click', function () {
        /*Get image of canvas element*/
        var url_base64jp = document.getElementById("memoriaUtilizacao").toDataURL("image/jpg");
        /*get download button (tag: <a></a>) */
        var a = document.getElementById("downloadStatus");
        /*insert chart image url to download button (tag: <a></a>) */
        a.href = url_base64jp;
    });

    var espacosLivres = document.getElementById('espacosLivres').getContext('2d');

    if ('@ViewBag.framesLivres' != '') var framesLivres = @Html.Raw(ViewBag.framesLivres);

    var espacoChart = new Chart(espacosLivres, {
        type: 'bar',
        data: {
            labels: ['(0 - 10)%', '(10,1 - 20)%', '(20,1 - 30)%', '(30,1 - 40)%', '(50,1 - 60)%', '(60,1 - 70)%', '(70,1 - 80)%', '(80,1 - 90)%', '(90,1 - 100)%'],
            datasets: [{
                label: 'frames',
                data: framesLivres,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(88, 214, 141, 0.2)',
                    'rgba(93, 173, 226, 0.2)',
                    'rgba(192, 57, 43, 0.2)',
                    'rgba(229, 152, 102, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)',
                    'rgba(88, 214, 141, 1)',
                    'rgba(93, 173, 226, 1)',
                    'rgba(192, 57, 43, 1)',
                    'rgba(229, 152, 102, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        // Include a dollar sign in the ticks
                        callback: function (value, index, values) {
                            return value;
                        }
                    }
                }]
            },
            legend: {
                display: false,
            }
        }
    });

    //Download Chart Image
    document.getElementById("download").addEventListener('click', function () {
        /*Get image of canvas element*/
        var url_base64jp = document.getElementById("espacosLivres").toDataURL("image/jpg");
        /*get download button (tag: <a></a>) */
        var a = document.getElementById("download");
        /*insert chart image url to download button (tag: <a></a>) */
        a.href = url_base64jp;
    });
    </script>


<!--Datatables-->
<link rel="stylesheet" href="~/css/datatables.min.css" />
<script src="~/js/datatables.min.js"></script>

<script>
    $(document).ready(function () {
        var first = '@(ViewBag.First)';
        var next = '@(ViewBag.Next)';
        var best = '@(ViewBag.Best)';
        var worst = '@(ViewBag.Worst)';

        if (first == 'True') $('.btn-FirstFit').addClass('disabled');
        else $('.btn-FirstFit').removeClass('disabled');

        if (next == 'True') $('.btn-NextFit').addClass('disabled');
        else $('.btn-NextFit').removeClass('disabled');

        if (best == 'True') $('.btn-BestFit').addClass('disabled');
        else $('.btn-BestFit').removeClass('disabled');

        if (worst == 'True') $('.btn-WorstFit').addClass('disabled');
        else $('.btn-WorstFit').removeClass('disabled');
    });

    $('.btn-alg').on('click', function (){
        var algoritmo = $(this).data('alg');
        var memoriaID = '@(ViewBag.memoriaID)';
        var processQTD = '@(ViewBag.processQTD)';

        $('#modalAlgTitle').text('Inicializar a simulação (' + algoritmo + ')');
        $('#modal-body-text').text('Quantidade processos a serem inseridos na memória (' + processQTD + ')');

        $('.iniciar-simulacao').data('alg', algoritmo);
    });

    $('.btn-close-response').on('click', function () {
        $('#response-modal').modal('hide');
    });

    $('.iniciar-simulacao').on('click', function () {
        var algoritmo = $(this).data('alg');
        var memoriaID = '@(ViewBag.memoriaID)';

        $('#algModal').modal('hide');
        $('#loadingModal').modal('show');

        $.ajax({
            url: "/Memories/AlgSimulation/",
            type: "POST",
            datatype: "text",
            data: { id: memoriaID, Alg: algoritmo },
            success: function (res) {
                if(res.success){
                    var message = 'Foram inseridos (' + res.processos + ') process na mémoria.';

                    $('#loadingModal').modal('hide');
                    openResponseModal(true, message, algoritmo);
                    $('.btn-' + algoritmo).addClass('disabled');
                    $('.btn-' + algoritmo).prop('disabled', true);
                    $('#' + algoritmo + 'Check').prop("checked", true);
                }
                else{
                    var message = 'Houve um erro na simulação: ' + res.error;
                    $('#loadingModal').modal('hide');

                    openResponseModal(false, message, algoritmo);
                }
            },
            error: function (req, status, error) {
                var message = 'Houve um erro na simulação: ' + error;
                $('#loadingModal').modal('hide');

                openResponseModal(false, message);
                console.log('Status: '+ status + ' Erro: '+msg);
            }
        });
    });

    function openResponseModal(isSuccess, message, alg)
    {
        $('#response-alg').text('Algoritmo: ' + alg);

        if (isSuccess) {
            $('.modal-response-header').addClass('modal-header-success');
            $('#response-title').text('Sucesso!');
            $('#response-message').text(message);
        }
        else {
            $('.modal-response-header').addClass('modal-header-error');
            $('#response-title').text('Erro!');
            $('#response-message').text(message);
        }

        $('#response-modal').modal('show');
    }

    $('#algModal').on('hidden.bs.modal', function (e) {
        $('#modalAlgTitle').text();
        $('#modal-body-text').text();
    });

    $('#response-modal').on('hidden.bs.modal', function (e) {
        $('.modal-response-header').removeClass('modal-header-error');
        $('.modal-response-header').removeClass('modal-header-success');
    });

    $('#tableDados').dataTable({
        responsive: true,
        "order": [[1, "asc"]],
        "oLanguage": {
            "sProcessing": "Processando...",
            "sLengthMenu": "Mostrar _MENU_ registros",
            "sZeroRecords": "Não foram encontrados resultados",
            "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
            "sInfoEmpty": "Mostrando de 0 até 0 de 0 registros",
            "sInfoFiltered": "",
            "sInfoPostFix": "",
            "sSearch": "Buscar : ",
            "sUrl": "",
            "oPaginate": {
                "sFirst": "Primeiro",
                "sPrevious": "Anterior",
                "sNext": "Seguinte",
                "sLast": "Último"
            }
        }
    });
</script>